Требования(актвины для версии 2,5 и выше):
- тесная интегрировация с системой
- сервис должен использовать отдельную учетную запись для запуска утилиты РК и сам является лишь планировщиком.
- сервис НЕ должен взаимодействовать с пользователем ни в каком виде
ГОТОВО: исключение - звуковые сигналы о настройках

- сервис может читать настройки из файла настроек службы
Уточнение требования:
кроме случаев загрузки после режимов Спящий и так далее

Причина:
при "пробуждении" любое обращение к диску вызывает перезакрузку
ГОТОВО

- сервис должен занимать в памяти как можно меньше места
ГОТОВО: ЗАНИМАЕТ В 18 раз МЕНЬШЕ ПАМЯТИ, и на 20% лучше по статистическим показателям

- сервис даже и без планов должен быть в памяти
ГОТОВО

- сервис не может загружать и использовать данные из библиотек локализации и ядра приложения. Он должен быть как можно более компактным
ГОТОВО: для сервиса выделена спец библиотека

- сервис должен иметь функции принудительного останова и перезапуска при обновлении приложения и его деинсталляции
ГОТОВО

- сервис не заботиться об одновременном запуске многочисленных копий приложения
ГОТОВО

- настройки планировщика желательно либо вынести либо в потоки, либо в отдельный файл с ограниченным доступом
ГОТОВО: настройки вынесены в отдельный файл

- сервис не может быть остановлен НЕ_АДМИНИСТРАТОРОМ
ГОТОВО

- сервис НЕ может взаимодействовать никоим образом с пользователем(так как это открывает пути для уязвимостей и eop)
ГОТОВО

- только сервис может приостановить процесс РК (ф-я загруженности процессора)
ГОТОВО

2. Переносимость
Сервис должен быть спроектирован таким образом, чтобы быть без проблем портированным на mono
Сервис НЕ должен полагаться на текущий каталог, а должен определять каталог своей сборки сам:
 это нужно для упрощения установки, документации и логики конфигуратора
ГОТОВО: логика службы оттестирована

Логика внутреннего тестирования и специфический функционал должны быть только при компилировании в режиме debug
Готово

Особенности реализации:
1) сервис не привязан к текущему каталогу. Он использует каталог своей сборки
2) сервис занимается только планированием времени
- сервис в памяти постоянно, упростить логику. Например настройки будет проверять по сигналу, но если даже настройки некорректны, то сервис остается в памяти, но отключает планирование
- на сервис можно будет повесить апгрейд
2) при получении сигнала сервис не останавливает текущий РК

3. как тогда будет осуществляться бэкап
Сервис создает экземпляр программы консольная тулза РК,
запускает ее с нужными привилегиями(неадминистраторскими, что надежнее),

Таким образом:
можно будет упростить логику, настройки для пользоателей и админов, сэкономить на памяти и повысить быстродействие, а также получить возможность запуска РК с правами BackupOperator в XP
