<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="UsageVariantsNNbackupExeTaskMyTaskTitleNRunningWithoutParametersOutputsInformationToConsoleNNbackupExeTaskMyTask1TitleTaskMyTask2TitleTaskMyTask3TitleNRunsSeveralTasksOneByOneNNbackupExeTaskMyTaskTitleUsefilelogNOutputsInformationInFileLogNNbackupExeTaskMyTaskTitleShutdownNbackupExeTaskMyTaskTitleLogoffNbackupExeTaskMyTaskTitleSuspendNbackupExeTaskMyTaskTitleRebootNbackupExeTaskMyTaskTitleHibernateNNbackupExeHelpNOutputsBriefHelpN" xml:space="preserve">
    <value>Usage variants:

butilc.exe "Task=My task title"
   Runs specified task.

butilc.exe "Task=My task title" Shutdown
butilc.exe "Task=My task title" LogOff 
butilc.exe "Task=My task title" Reboot

butilc.exe Help
   Outputs brief help
</value>
  </data>
  <data name="ErrorInvalidCommandParametersSpecified" xml:space="preserve">
    <value>Error: Invalid command parameters specified!!!</value>
  </data>
  <data name="ToRunProgramWithThisSwitchYouShouldDisableSchedulingInOptionsFirstPleaseReferToManual" xml:space="preserve">
    <value>To run program with this switch you should disable scheduling in options first. Please refer to manual!</value>
  </data>
  <data name="CannotOpenFileLogDueToCryticalError0" xml:space="preserve">
    <value>Cannot open file log due to crytical error {0}</value>
  </data>
  <data name="PleaseSpecifyTheBackupTaskTitleUsingTheCommandLineArgument0MyBackupTaskTitleNexampleBackupExe0MyBackupTitle" xml:space="preserve">
    <value>Please, specify the backup task title using the command line argument "{0}My backup task title"
Example: butilc.exe "{0}My backup title"</value>
  </data>
  <data name="TherereNoBackupTaskWithTitle0" xml:space="preserve">
    <value>There're no backup task with title '{0}'.</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="BackupFailedPleaseReviewOpenedLog" xml:space="preserve">
    <value>Backup has failed (see opened log)</value>
  </data>
  <data name="BackupProcessCompletedSuccesfully" xml:space="preserve">
    <value>Backup is succeeded!</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Title:</value>
  </data>
  <data name="PhotosVideosFolderOnMediaDevice" xml:space="preserve">
    <value>Photos/Videos folder on media device:
(or FTP URI: ftp://login:password@serverName:port)</value>
  </data>
  <data name="DestinationFolder" xml:space="preserve">
    <value>Destination folder:</value>
  </data>
  <data name="FileNameTransformations" xml:space="preserve">
    <value>File name transformations:</value>
  </data>
  <data name="HelpForTokens" xml:space="preserve">
    <value>Supported tokens:
{DATE:Format} - Inserts file modification date in the specified format.
To see all options google "C# DateTime format".</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="CreatePhotosVideosMovalTask" xml:space="preserve">
    <value>Create Photos/Videos moval task</value>
  </data>
  <data name="PhotosVideosMovalTask" xml:space="preserve">
    <value>Edit "{0}" Photos/Videos moval task</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="DestinationDirectoryDoesNotExist" xml:space="preserve">
    <value>Destination directory does not exist.</value>
  </data>
  <data name="SourceFolderDoesNotExist" xml:space="preserve">
    <value>Photo/Video location was not specified.</value>
  </data>
  <data name="TransformFileNameIsEmpty" xml:space="preserve">
    <value>Transform file name is empty.</value>
  </data>
  <data name="TitleIsEmptyOrContainsNotSupportedPathCharacters" xml:space="preserve">
    <value>Title is empty or contains not supported path characters.</value>
  </data>
  <data name="_Create" xml:space="preserve">
    <value>_Create</value>
  </data>
  <data name="Tasks" xml:space="preserve">
    <value>Задания</value>
  </data>
  <data name="_RunF5Enter" xml:space="preserve">
    <value>_Run (F5, Enter)</value>
  </data>
  <data name="_EditF4" xml:space="preserve">
    <value>_Edit (F4)</value>
  </data>
  <data name="_DeleteF8Del" xml:space="preserve">
    <value>_Delete (F8, Del)</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="PleaseConfirmDeletionOf0" xml:space="preserve">
    <value>Please confirm deletion of "{0}"</value>
  </data>
  <data name="YouCannotEditThisTypeOfTaskInCLI" xml:space="preserve">
    <value>You cannot edit this type of task in CLI.</value>
  </data>
</root>